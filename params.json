{"name":"Promise-utils","tagline":"Collection of promise utilities","body":"[![Build Status](https://travis-ci.org/doug-martin/promise-utils.png?branch=master)](https://travis-ci.org/doug-martin/promise-utils)\r\n\r\n[![browser support](https://ci.testling.com/doug-martin/promise-utils.png)](http://ci.testling.com/doug-martin/promise-utils)\r\n\r\n# promise-utils\r\n\r\n`promise-utils` is a Javascript library that provides utilities for working with promises. `promise-utils` can be used as a monad library for promises or each function can be used standalone.\r\n\r\nThis library uses [`promise-extended`](https://github.com/doug-martin/promise-extended) internally but can be used with any promises A+ compliant library such as [`Q`](https://github.com/kriskowal/q)\r\n\r\n`promise-utils` can be used standalone or incorporated into [`extended`](https://github.com/doug-martin/extended)\r\n\r\n```javascript\r\nvar pUtils = require(\"promise-utils\");\r\n```\r\n\r\nOr\r\n\r\n```javascript\r\nvar myextended = require(\"extended\")\r\n\t.register(require(\"promise-extended\"));\r\n```\r\n\r\n## Installation\r\n\r\n```\r\nnpm install promise-utils\r\n```\r\n\r\nOr [download the source](https://raw.github.com/doug-martin/promise-utils/master/index.js) ([minified](https://raw.github.com/doug-martin/promise-utils/master/promise-utils.min.js))\r\n\r\n## Usage\r\n\r\n### Arrays\r\n\r\n`promise-utils` can be used with promises or normal arrays by using the `async` method.\r\n\r\n**NOTE** The examples below uses a `resolve` method which represents turning an array into a promise resolved with the given array. This is used for brevity where you would typically be working with promises returned from an asynchronous method such as a database call.\r\n\r\n```javascript\r\n\r\nvar arr = [1,2,3];\r\nvar promiseArr = resolve(arr);\r\n\r\npUtils(arr).async().forEach(function(item){\r\n    console.log(item);\r\n}).then(function(){\r\n    console.log(\"Done Looping\");\r\n});\r\n\r\n//OR\r\n\r\npUtils(promiseArr).forEach(function(item){\r\n    console.log(item);\r\n}).then(function(){\r\n    console.log(\"Done Looping\");\r\n});\r\n\r\n\r\n```\r\n\r\n**Chaining**\r\n\r\nWhen using `promise-utils` as a monad with a promise you may chain methods together.\r\n\r\n```javascript\r\n\r\nvar arr = resolve([1, 2, 3, 4, 5]);\r\npUtils(arr)\r\n    .map(function (num, i) {\r\n        return num * (i + 1);\r\n    })\r\n    .filter(function (num) {\r\n        return num % 2;\r\n    })\r\n    .avg()\r\n    .then(function(res){\r\n        //11.666666666666666\r\n    });\r\n\r\n```\r\n\r\n**`forEach`**\r\n\r\nSimilar to `Array#forEach` except that it resolves with the original array for chaining.\r\n\r\n```javascript\r\n//as a monad\r\n\r\npUtils(resolve([1, 2, 3])).forEach(function(item){\r\n    console.log(item);\r\n}).then(function(){\r\n    console.log(\"Done Looping\");\r\n});\r\n\r\npUtils.forEach(resolve([1, 2, 3]), function(item){\r\n    console.log(item);\r\n}).then(function(){\r\n    console.log(\"Done Looping\");\r\n});\r\n\r\n```\r\n\r\nYou may also return a promise from the iterator function, which will prevent the returned promise from resolving until all the returned promises are done.\r\n\r\n```javascript\r\npUtils(resolve([1, 2, 3])).forEach(function(item){\r\n     var ret = new Promise();\r\n     setTimeout(function(){\r\n        ret.callback(item);\r\n     }, 200);\r\n     return ret.promise();\r\n}).then(function(){\r\n    //all promises from iterator function are resolved.\r\n    console.log(\"Done Looping\");\r\n});\r\n\r\n```\r\n\r\nYou may also specify a `limit` which will specify the number of items to be looped at a time, if limit is not specified then all items will be iterated regardless of whether or not the previous item in the array is done.\r\n\r\n\r\n```javascript\r\n\r\npUtils(resolve([1, 2, 3])).forEach(function(item){\r\n    var ret = new Promise();\r\n    setTimeout(function(){\r\n        ret.callback(item);\r\n    }, 200);\r\n    return ret.promise();\r\n}, 1).then(function(){\r\n    console.log(\"Done Looping\");\r\n});\r\n\r\n```\r\n\r\nIn the above example only one item will be iterated one at a time.\r\n\r\n**`map`**\r\n\r\nAsync version of `Array#map`.\r\n\r\n```javascript\r\n//as a monad\r\n\r\npUtils(resolve([1, 2, 3])).map(function(item){\r\n    return item * 2;\r\n}).then(function(result){\r\n    console.log(result); //[2, 4, 6];\r\n});\r\n\r\npUtils.map(resolve([1, 2, 3]), function(item){\r\n    return item * 2;\r\n}).then(function(result){\r\n    console.log(result); //[2, 4, 6];\r\n});\r\n\r\n```\r\n\r\nYou may also return a promise from the iterator function, which will prevent the returned promise from resolving until all the returned promises are done.\r\n\r\n```javascript\r\n //as a monad\r\n\r\npUtils(resolve([1, 2, 3])).map(function(item){\r\n     var ret = new Promise();\r\n     setTimeout(function(){\r\n        ret.callback(item * 2);\r\n     }, 200);\r\n     return ret.promise();\r\n}).then(function(result){\r\n    console.log(result); //[2, 4, 6];\r\n});\r\n\r\n```\r\n\r\nYou may also specify a `limit` which will specify the number of items to be looped at a time, if limit is not specified then all items will be iterated regardless of whether or not the previous item in the array is done.\r\n\r\n```javascript\r\n\r\npUtils(resolve([1, 2, 3])).map(function(item){\r\n    var ret = new Promise();\r\n    setTimeout(function(){\r\n        ret.callback(item * 2);\r\n    }, 200);\r\n    return ret.promise();\r\n}, 1).then(function(){\r\n    console.log(result); //[2, 4, 6];\r\n});\r\n\r\n```\r\n\r\nIn the above example only one item will be iterated at a time.\r\n\r\n**`filter`**\r\n\r\nAsync version of `Array#filter`.\r\n\r\n```javascript\r\n//as a monad\r\n\r\npUtils(resolve([1, 2, 3])).filter(function(item){\r\n    return item % 2;\r\n}).then(function(result){\r\n    console.log(result); //[1, 3];\r\n});\r\n\r\npUtils.filter(resolve([1, 2, 3]), function(item){\r\n    return item % 2;\r\n}).then(function(result){\r\n    console.log(result); //[1, 3];\r\n});\r\n\r\n```\r\n\r\nYou may also return a promise from the iterator function, which will prevent the returned promise from resolving until all the returned promises are done.\r\n\r\n```javascript\r\n //as a monad\r\n\r\npUtils(resolve([1, 2, 3])).filter(function(item){\r\n     var ret = new Promise();\r\n     setTimeout(function(){\r\n        ret.callback(item % 2);\r\n     }, 200);\r\n     return ret.promise();\r\n}).then(function(result){\r\n    console.log(result); //[1, 3];\r\n});\r\n\r\n```\r\n\r\nYou may also specify a `limit` which will specify the number of items to be looped at a time, if limit is not specified then all items will be iterated regardless of whether or not the previous item in the array is done.\r\n\r\n```javascript\r\n\r\npUtils(resolve([1, 2, 3])).filter(function(item){\r\n    var ret = new Promise();\r\n    setTimeout(function(){\r\n        ret.callback(item % 2);\r\n    }, 200);\r\n    return ret.promise();\r\n}, 1).then(function(){\r\n    console.log(result); //[1, 3];\r\n});\r\n\r\n```\r\n\r\nIn the above example only one item will be iterated at a time.\r\n\r\n**`every`**\r\n\r\nAsync version of `Array#every`.\r\n\r\n```javascript\r\n\r\npUtils(resolve([1, 2, 3])).every(function(item){\r\n    return isNumber(item);\r\n}).then(function(result){\r\n    console.log(result); //true;\r\n});\r\n\r\npUtils.every(resolve([1, 2, 3]), function(item){\r\n    return isNumber(item);\r\n}).then(function(result){\r\n    console.log(result); //true;\r\n});\r\n\r\n```\r\n\r\nYou may also return a promise from the iterator function, which will prevent the returned promise from resolving until all the returned promises are done.\r\n\r\n```javascript\r\n //as a monad\r\n\r\npUtils(resolve([1, 2, 3])).every(function(item){\r\n     var ret = new Promise();\r\n     setTimeout(function(){\r\n        ret.callback(isNumber(item));\r\n     }, 200);\r\n     return ret.promise();\r\n}).then(function(result){\r\n    console.log(result); //[true];\r\n});\r\n\r\n```\r\n\r\nYou may also specify a `limit` which will specify the number of items to be looped at a time, if limit is not specified then all items will be iterated regardless of whether or not the previous item in the array is done.\r\n\r\n```javascript\r\n\r\npUtils(resolve([1, 2, 3])).every(function(item){\r\n    var ret = new Promise();\r\n    setTimeout(function(){\r\n        ret.callback(isNumber(item));\r\n    }, 200);\r\n    return ret.promise();\r\n}, 1).then(function(){\r\n    console.log(result); //true;\r\n});\r\n\r\n```\r\n\r\nIn the above example only one item will be iterated at a time.\r\n\r\n**`some`**\r\n\r\nAsync version of `Array#every`.\r\n\r\n```javascript\r\n\r\npUtils(resolve([1, 2, 3])).some(function(item){\r\n    return item === 1;\r\n}).then(function(result){\r\n    console.log(result); //true;\r\n});\r\n\r\npUtils.some(resolve([1, 2, 3]), function(item){\r\n    return item === 1;\r\n}).then(function(result){\r\n    console.log(result); //true;\r\n});\r\n\r\n```\r\n\r\nYou may also return a promise from the iterator function, which will prevent the returned promise from resolving until all the returned promises are done.\r\n\r\n```javascript\r\n //as a monad\r\n\r\npUtils(resolve([1, 2, 3])).some(function(item){\r\n     var ret = new Promise();\r\n     setTimeout(function(){\r\n        ret.callback(item === 1);\r\n     }, 200);\r\n     return ret.promise();\r\n}).then(function(result){\r\n    console.log(result); //[true];\r\n});\r\n\r\n```\r\n\r\nYou may also specify a `limit` which will specify the number of items to be looped at a time, if limit is not specified then all items will be iterated regardless of whether or not the previous item in the array is done.\r\n\r\n```javascript\r\n\r\npUtils(resolve([1, 2, 3])).some(function(item){\r\n    var ret = new Promise();\r\n    setTimeout(function(){\r\n        ret.callback(item === 1);\r\n    }, 200);\r\n    return ret.promise();\r\n}, 1).then(function(){\r\n    console.log(result); //true;\r\n});\r\n\r\n```\r\n\r\nIn the above example only one item will be iterated at a time.\r\n\r\n**`sum`**\r\n\r\nSums the values of an array\r\n\r\n```javascript\r\n\r\npUtils.sum(resolve([1,2,3])).then(function(sum){\r\n   //6\r\n});\r\n\r\npUtils(resolve([1,2,3])).sum().then(function(sum){\r\n    //6\r\n});\r\n\r\n```\r\n\r\n**`avg`**\r\n\r\nFinds the average of an array of numbers.\r\n\r\n```javascript\r\n\r\npUtils.avg(resolve([1,2,3])).then(function(avg){\r\n    //2\r\n});\r\n\r\npUtils(resolve([1,2,3])).avg().then(function(avg){\r\n    //2\r\n});\r\n```\r\n\r\n**`sort`**\r\n\r\nSorts an array based on a property, by natural ordering, or by a custom comparator.\r\n\r\n**Note** this does not change the original array.\r\n\r\n```javascript\r\n\r\npUtils.sort(resolve([{a: 1},{a: 2},{a: -2}]), \"a\").then(function(sorted){\r\n    //[{a: -2},{a: 1},{a: 2}];\r\n})\r\n\r\npUtils(resolve([{a: 1},{a: 2},{a: -2}])).sort(\"a\").then(function(sorted){\r\n    //[{a: -2},{a: 1},{a: 2}];\r\n})\r\n\r\n\r\n```\r\n\r\n**`min`**\r\n\r\nFinds the minimum value in an array based on a property, by natural ordering, or by a custom comparator.\r\n\r\n```javascript\r\n\r\npUtils.min(resolve([ 3, -3, -2, -1, 1, 2])).then(function(min){\r\n    //-3\r\n});\r\n\r\npUtils.min(resolve([{a: 1},{a: 2},{a: -2}]), \"a\").then(function(min){\r\n    //{a : -2}\r\n});\r\n\r\npUtils(resolve([ 3, -3, -2, -1, 1, 2])).min().then(function(min){\r\n    //-3\r\n});\r\n\r\npUtils(resolve([{a: 1},{a: 2},{a: -2}])).min(\"a\").then(function(min){\r\n    //{a : -2}\r\n});\r\n\r\n```\r\n\r\n**`max`**\r\n\r\nFinds the maximum value in an array based on a property, by natural ordering, or by a custom comparator.\r\n\r\n```javascript\r\n\r\npUtils.max(resolve([ 3, -3, -2, -1, 1, 2])).then(function(max){\r\n     //2\r\n});\r\n\r\npUtils.max(resolve([{a: 1},{a: 2},{a: -2}]), \"a\").then(function(max){\r\n    //{a : 2}\r\n});\r\n\r\npUtils(resolve([ 3, -3, -2, -1, 1, 2])).max().then(function(max){\r\n    //2\r\n});\r\n\r\npUtils(resolve([{a: 1},{a: 2},{a: -2}])).max(\"a\").then(function(max){\r\n    //{a : 2}\r\n});\r\n\r\n```\r\n\r\n**`difference`**\r\n\r\nFinds the difference between two arrays.\r\n\r\n```javascript\r\npUtils.difference(resolve([1, 2, 3]), [2]).then(function(diff){\r\n    //[1, 3]\r\n});\r\npUtils.difference(resolve([true, false]), resolve([false])).then(function(diff){\r\n    //[true]\r\n});\r\n\r\npUtils.difference(resolve([\"a\", \"b\", 3]), resolve([3])).then(function(diff){\r\n    //[\"a\", \"b\"]\r\n});\r\n\r\npUtils.difference(resolve([{a: 1}, {a: 2}, {a: 3}]), resolve([{a: 2}, {a: 3}])).then(function(diff){\r\n    //[{a: 1}]\r\n});\r\n\r\npUtils(resolve([true, false])).difference([false]).then(function(diff){\r\n    // [true]\r\n});\r\n\r\npUtils(resolve([1, 2, 3])).difference(resolve([2])).then(function(diff){\r\n    // [1, 3]\r\n});\r\npUtils(resolve([1, 2, 3])).difference([2], resolve([3])).then(function(diff){\r\n     //[1]\r\n});\r\n\r\npUtils(resolve([\"a\", \"b\", 3])).difference([3]).then(function(diff){\r\n     //[\"a\", \"b\"]\r\n});\r\npUtils(resolve([{a: 1}, {a: 2}, {a: 3}])).difference(resolve([{a: 2}, {a: 3}])).then(function(diff){\r\n    // [{a: 1}]\r\n});\r\n```\r\n\r\n**`unique`**\r\n\r\nRemoved duplicate values from an array\r\n\r\n```javascript\r\n\r\npUtils.unique(resolve([1, 2, 2, 3, 3, 3, 4, 4, 4])).then(function(unique){\r\n    //[1, 2, 3, 4]\r\n}):\r\npUtils(resolve([1, 2, 2, 3, 3, 3, 4, 4, 4])).unique().then(function(unique){\r\n    //[1, 2, 3, 4]\r\n});\r\n\r\npUtils(resolve([\"a\", \"b\", \"b\"])).unique().then(function(unique){\r\n    //[\"a\", \"b\"]\r\n});\r\n\r\npUtils.unique(resolve([\"a\", \"b\", \"b\"])).then(function(unique){\r\n    //[\"a\", \"b\"]\r\n});\r\n```\r\n\r\n**`rotate`**\r\n\r\nRotates an array by the number of places for 1 position by default.\r\n\r\n```javascript\r\n\r\nvar arr = pUtils(resolve([\"a\", \"b\", \"c\", \"d\"]))\r\narr.rotate();   //resolves with [\"b\", \"c\", \"d\", \"a\"]\r\narr.rotate(2);  //resolves with [\"c\", \"d\", \"a\", \"b\"]\r\narr.rotate(3);  //resolves with [\"d\", \"a\", \"b\", \"c\"]\r\narr.rotate(4);  //resolves with [\"a\", \"b\", \"c\", \"d\"]\r\narr.rotate(-1); //resolves with [\"d\", \"a\", \"b\", \"c\"]\r\narr.rotate(-2); //resolves with [\"c\", \"d\", \"a\", \"b\"]\r\narr.rotate(-3); //resolves with [\"b\", \"c\", \"d\", \"a\"]\r\narr.rotate(-4); //resolves with [\"a\", \"b\", \"c\", \"d\"]\r\n\r\narr = resolve([\"a\", \"b\", \"c\", \"d\"]);\r\npUtils.rotate(arr);     //resolves with [\"b\", \"c\", \"d\", \"a\"]\r\npUtils.rotate(arr, 2);  //resolves with [\"c\", \"d\", \"a\", \"b\"]\r\npUtils.rotate(arr, 3);  //resolves with [\"d\", \"a\", \"b\", \"c\"]\r\npUtils.rotate(arr, 4);  //resolves with [\"a\", \"b\", \"c\", \"d\"]\r\npUtils.rotate(arr, -1)  //resolves with [\"d\", \"a\", \"b\", \"c\"]\r\npUtils.rotate(arr, -2); //resolves with [\"c\", \"d\", \"a\", \"b\"]\r\npUtils.rotate(arr, -3); //resolves with [\"b\", \"c\", \"d\", \"a\"]\r\npUtils.rotate(arr, -4); //resolves with [\"a\", \"b\", \"c\", \"d\"]\r\n\r\n```\r\n\r\n**`permutations`**\r\n\r\nFinds all permutations of an array.\r\n\r\n```javascript\r\n\r\npUtils(resolve([1, 2, 3])).permutations(); //resolves with [\r\n                                 //   [ 1, 2, 3 ],\r\n                                 //   [ 1, 3, 2 ],\r\n                                 //   [ 2, 3, 1 ],\r\n                                 //   [ 2, 1, 3 ],\r\n                                 //   [ 3, 1, 2 ],\r\n                                 //   [ 3, 2, 1 ]\r\n                                 //]\r\n\r\npUtils(resolve([1, 2, 3])).permutations(2);// resolves with [\r\n                                           //   [ 1, 2],\r\n                                           //   [ 1, 3],\r\n                                           //   [ 2, 3],\r\n                                           //   [ 2, 1],\r\n                                           //   [ 3, 1],\r\n                                           //   [ 3, 2]\r\n                                           //]\r\n\r\npUtils.permutations(resolve([1, 2, 3]));   // resolves with [\r\n                                 //   [ 1, 2, 3 ],\r\n                                 //   [ 1, 3, 2 ],\r\n                                 //   [ 2, 3, 1 ],\r\n                                 //   [ 2, 1, 3 ],\r\n                                 //   [ 3, 1, 2 ],\r\n                                 //   [ 3, 2, 1 ]\r\n                                 //]\r\n\r\npUtils.permutations(resolve([1, 2, 3]), 2); //resolves with [\r\n                                    //   [ 1, 2],\r\n                                    //   [ 1, 3],\r\n                                    //   [ 2, 3],\r\n                                    //   [ 2, 1],\r\n                                    //   [ 3, 1],\r\n                                    //   [ 3, 2]\r\n                                    //]\r\n\r\n```\r\n\r\n**`zip`**\r\n\r\nZips the values of multiple arrays into a single pUtils.\r\n\r\n```javascript\r\n\r\npUtils(resolve([1])).zip(resolve([2]), resolve([3]));//resolves with [\r\n                                                     //  [ 1, 2, 3 ]\r\n                                                     //];\r\n\r\npUtils(resolve([1, 2])).zip(resolve([2]), [3]);      //resolves with [\r\n                                                     //  [ 1, 2, 3 ],\r\n                                                     //  [2, null, null]\r\n                                                     //]\r\n\r\npUtils(resolve([1, 2, 3])).zip([ 4, 5, 6 ], b);      //resolves with [\r\n                                                     //  [1, 4, 7],\r\n                                                     //  [2, 5, 8],\r\n                                                     //  [3, 6, 9]\r\n                                                     //]\r\n\r\npUtils(resolve([1, 2])).zip([ 4, 5, 6 ], resolve([7, 8, 9 ])); //resolves with [\r\n                                                               //  [1, 4, 7],\r\n                                                               //  [2, 5, 8]\r\n                                                               //]\r\n\r\npUtils(resolve([ 4, 5, 6 ])).zip([1, 2], [8]);       //resolves with [\r\n                                                     //  [4, 1, 8],\r\n                                                     //  [5, 2, null],\r\n                                                     //  [6, null, null]\r\n                                                     //]\r\n\r\n\r\npUtils.zip(resolve([1]), [2], [3]);                  //resolves with [\r\n                                                     //  [ 1, 2, 3 ]\r\n                                                     //]\r\n\r\npUtils.zip(resolve([1, 2]), resolve([2]), [3]);      //resolves with [\r\n                                                     //  [ 1, 2, 3 ],\r\n                                                     //  [2, null, null]\r\n                                                     //]\r\n\r\npUtils.zip(resolve([1, 2, 3]), [4,5,6],  resolve([7, 8, 9 ])); //resolves with [\r\n                                                               //  [1, 4, 7],\r\n                                                               //  [2, 5, 8],\r\n                                                               //  [3, 6, 9]\r\n                                                               //]\r\n\r\npUtils.zip(resolve([1, 2]), [4,5,6],  [7, 8, 9 ]);    //resolves with [\r\n                                                      //  [1, 4, 7],\r\n                                                      //  [2, 5, 8]\r\n                                                      //]\r\n\r\npUtils.zip([ 4, 5, 6 ], [1, 2], resolve([8]));        //resolves with [\r\n                                                      //  [4, 1, 8],\r\n                                                      //  [5, 2, null],\r\n                                                      //  [6, null, null]\r\n                                                      //]\r\n\r\n```\r\n\r\n**`transpose`**\r\n\r\nTranspose a multi dimensional array.\r\n\r\n```javascript\r\npUtils(resolve([[1, 2, 3],[4, 5, 6]])).transpose();   //resolves with [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\r\npUtils([[1, 2],[3, 4],[5, 6]]).async().transpose();   //resolves with [ [ 1, 3, 5 ], [ 2, 4, 6 ] ]\r\npUtils(resolve([[1],[3, 4],[5, 6]])).transpose();     //resolves with [ [1] ]\r\n\r\n\r\npUtils.transpose(resolve([[1, 2, 3],[4, 5, 6]]));     //resolves with [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\r\npUtils.transpose(resolve([[1, 2],[3, 4],[5, 6]]));    //resolves with [ [ 1, 3, 5 ], [ 2, 4, 6 ] ]\r\npUtils.transpose(resolve([[1],[3, 4],[5, 6]]));       //resolves with [ [1] ]\r\n```\r\n\r\n**`valuesAt`**\r\n\r\nGathers values at the specified indexes.\r\n\r\n```javascript\r\n\r\nvar arr = pUtils(resolve([\"a\", \"b\", \"c\", \"d\"]));\r\narr.valuesAt(1, 2, 3);      //resolves with [\"b\", \"c\", \"d\"]\r\narr.valuesAt(1, 2, 3, 4);   //resolves with [\"b\", \"c\", \"d\", null]\r\narr.valuesAt(0, 3);         //resolves with [\"a\", \"d\"]\r\n\r\narr = resolve([\"a\", \"b\", \"c\", \"d\"]);\r\npUtils.valuesAt(arr, 1, 2, 3);       //resolves with [\"b\", \"c\", \"d\"]\r\npUtils.valuesAt(arr, 1, 2, 3, 4);    //resolves with [\"b\", \"c\", \"d\", null]\r\npUtils.valuesAt(arr, 0, 3);          //resolves with [\"a\", \"d\"]\r\n```\r\n\r\n**`union`**\r\n\r\nFinds the union of two arrays.\r\n\r\n```javascript\r\npUtils(resolve([\"a\", \"b\", \"c\"])).union([\"b\", \"c\", \"d\"]);           //resolves with [\"a\", \"b\", \"c\", \"d\"]);\r\npUtils([\"a\"]).async().union([\"b\"], [\"c\"], [\"d\"], resolve([\"c\"]));  //resolves with [\"a\", \"b\", \"c\", \"d\"]);\r\n\r\npUtils.union(resolve([\"a\", \"b\", \"c\"]), [\"b\", \"c\", \"d\"]);           //resolves with [\"a\", \"b\", \"c\", \"d\"]);\r\npUtils.union(resolve([\"a\"]), [\"b\"], resolve([\"c\"]), [\"d\"], [\"c\"]); //resolves with [\"a\", \"b\", \"c\", \"d\"]);\r\n```\r\n\r\n**`intersect`**\r\n\r\nFinds the intersection of arrays.\r\n\r\n```javascript\r\npUtils(resolve([1, 2])).intersect([2, 3], [2, 3, 5]);                            //resolves with [2];\r\npUtils(resolve([1, 2, 3])).intersect([2, 3, 4, 5], [2, 3, 5]);                   //resolves with [2, 3];\r\npUtils(resolve([1, 2, 3, 4])).intersect([2, 3, 4, 5], [2, 3, 4, 5]);             //resolves with [2, 3, 4];\r\npUtils(resolve([1, 2, 3, 4, 5])).intersect([1, 2, 3, 4, 5], [1, 2, 3]);          //resolves with [1, 2, 3];\r\npUtils(resolve([[1, 2, 3, 4, 5],[1, 2, 3, 4, 5],[1, 2, 3]])).intersect();        //resolves with [1, 2, 3];\r\n\r\npUtils.intersect(resolve([1, 2]), [2, 3], [2, 3, 5]);                             //resolves with [2]\r\npUtils.intersect(resolve([1, 2, 3]), [2, 3, 4, 5], [2, 3, 5]);                    //resolves with [2, 3]\r\npUtils.intersect(resolve([1, 2, 3, 4]), [2, 3, 4, 5], resolve([2, 3, 4, 5]));     //resolves with [2, 3, 4]\r\npUtils.intersect(resolve([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5], [1, 2, 3]);           //resolves with [1, 2, 3]);\r\npUtils.intersect(resolve([[1, 2, 3, 4, 5],[1, 2, 3, 4, 5], [1, 2, 3]]));          //resolves with [1, 2, 3]);\r\n```\r\n\r\n**`powerSet`**\r\n\r\nFinds the powerset of a given array.\r\n\r\n```javascript\r\npUtils(resolve([1, 2, 3])).powerSet();\r\npUtils.powerSet(resolve([1, 2, 3]));\r\n//Both resolve with\r\n//[\r\n//  [],\r\n//  [ 1 ],\r\n//  [ 2 ],\r\n//  [ 1, 2 ],\r\n//  [ 3 ],\r\n//  [ 1, 3 ],\r\n//  [ 2, 3 ],\r\n//  [ 1, 2, 3 ]\r\n//]\r\n```\r\n\r\n**`cartesian`**\r\n\r\nFinds the cartesian product of arrays.\r\n\r\n```javascript\r\npUtils(resolve([1, 2])).cartesian(resolve([2, 3]));\r\npUtils.cartesian(resolve([1, 2]), [2, 3]);\r\n//Both resolve with\r\n//[\r\n//  [1, 2],\r\n//  [1, 3],\r\n//  [2, 2],\r\n//  [2, 3]\r\n//]\r\n```\r\n\r\n**`compact`**\r\n\r\nCompacts the values of an array.\r\n\r\n```javascript\r\npUtils(resolve([1, null, null, x, 2])).compact(); //Resolves with [1, 2]\r\n\r\npUtils([1, 2]).async().compact();  //Resolves with [1, 2]\r\n\r\n\r\npUtils.compact(resolve([1, null, null, x, 2])); //Resolves with [1, 2]\r\npUtils.compact(resolve([1, 2])); //Resolves with [1, 2]\r\n```\r\n\r\n**`multiply`**\r\n\r\nReproduces the values in an array the given number of times.\r\n\r\n```javascript\r\npUtils(resolve([1, 2])).multiply(2); //Resolves with[1, 2, 1, 2, 1, 2]\r\n\r\npUtils.multiply(resolve([1, 2, 3]), 2); //Resolves with [1, 2, 3, 1, 2, 3]\r\n```\r\n\r\n**`flatten`**\r\n\r\nFlatten multiple arrays into a single array.\r\n\r\n```javascript\r\n\r\npUtils(resolve([ [1], [2], [3] ])).flatten(); //Resolves with [1, 2, 3]\r\n\r\npUtils.flatten(resolve([1, 2]), [2, 3], resolve([3, 4])); //Resolves with [1, 2, 2, 3, 3, 4]\r\n\r\n```\r\n\r\n**`pluck`**\r\n\r\nPluck properties from values in an array.\r\n\r\n**NOTE** Plucked properties may also be promises. `pluck` will return the resolved value of the promise\r\n\r\n```javascript\r\nvar arr = resolve([\r\n    {name: {first: \"Fred\", last: \"Jones\"}, age: 50, roles: [\"a\", \"b\", \"c\"]},\r\n    {name: {first: resolve(\"Bob\"), last: \"Yukon\"}, age: resolve(40), roles: resolve([\"b\", \"c\"])},\r\n    {name: {first: \"Alice\", last: \"Palace\"}, age: 35, roles: [\"c\"]},\r\n    {name: {first: resolve(\"Johnny\"), last: \"P.\"}, age: 56, roles: resolve([])}\r\n]);\r\n\r\npUtils.pluck(arr, \"name.first\"); //Resolves with [\"Fred\", \"Bob\", \"Alice\", \"Johnny\"]\r\npUtils(arr).pluck(\"age\"); //Resolves with [50, 40, 35, 56]\r\n\r\n```\r\n\r\n**`invoke`**\r\n\r\nInvokes the specified method on each value in an array.\r\n\r\n```javascript\r\n\r\nfunction person(name, age) {\r\n    return {\r\n        getName: function () {\r\n            return resolve(name);\r\n        },\r\n\r\n        getOlder: function () {\r\n            age++;\r\n            return resolve(this);\r\n        },\r\n\r\n        getAge: function () {\r\n            return resolve(age);\r\n        }\r\n    };\r\n};\r\n\r\nvar arr = resolve([person(\"Bob\", 40), person(\"Alice\", 35), person(\"Fred\", 50), person(\"Johnny\", 56)]);\r\n\r\npUtils.invoke(arr, \"getName\"); //Resolves with [\"Bob\", \"Alice\", \"Fred\", \"Johnny\"];\r\npUtils(arr).invoke(\"getName\"); //Resolves with [\"Bob\", \"Alice\", \"Fred\", \"Johnny\"];\r\n\r\npUtils(arr).invoke(\"getOlder\").invoke(\"getAge\"); //Resolves with [41, 36, 51, 57];\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}